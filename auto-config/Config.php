<?php

/*
 * This file is part of the ICanBoogie package.
 *
 * (c) Olivier Laviale <olivier.laviale@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ICanBoogie\AutoConfig;

use Composer\Util\Filesystem;
use Composer\Json\JsonFile;

class Config implements \IteratorAggregate
{
	protected $pathname;
	protected $filesystem;
	protected $fragments = [];
	protected $validator;

	public function __construct($pathname)
	{
		$this->pathname = $pathname;
		$this->filesystem = new Filesystem;
		$this->validator = new ConfigValidator;
	}

	public function add_fragment($path)
	{
		$pathname = $path . DIRECTORY_SEPARATOR . 'icanboogie.json';
		$json = new JsonFile($pathname);

		if (!$json->exists())
		{
			return;
		}

		$this->validator->validate($pathname);

		$this->fragments[$path] = $json->read();
	}

	public function synthesize(Filesystem $filesystem=null)
	{
		if (!$filesystem)
		{
			$filesystem = $this->filesystem;
		}

		$config = [

			'config-constructor' => [],
			'config-path' => [],
			'locale-path' => [],
			'module-path' => []
		];

		foreach ($this as $path => $fragment)
		{
			foreach ($fragment as $key => $value)
			{
				switch ($key)
				{
					case 'config-constructor':

						$config[$key] = array_merge($config[$key], $value);

						break;

					case 'config-path':
					case 'locale-path':
					case 'module-path':

						foreach ((array) $value as $v)
						{
							$config[$key][] = $filesystem->findShortestPathCode($this->pathname, "$path/$v");
						}

						break;
				}
			}
		}

		return $config;
	}

	public function getIterator()
	{
		return new \ArrayIterator($this->fragments);
	}

	public function render($synthesized_config=null)
	{
		if (!$synthesized_config)
		{
			$synthesized_config = $this->synthesize();
		}

		$class = __CLASS__;

		$config_constructor = $this->render_config_constructor($synthesized_config['config-constructor']);

		$config_path = implode(",\n\t\t", $synthesized_config['config-path']);
		$locale_path = implode(",\n\t\t", $synthesized_config['locale-path']);
		$module_path = implode(",\n\t\t", $synthesized_config['module-path']);

		return <<<EOT
<?php

// auto-config.php @generated by $class

return [

	'config-constructor' => [

		$config_constructor

	],

	'config-path' => [

		$config_path

	],

	'locale-path' => [

		$locale_path

	],

	'module-path' => [

		$module_path

	]
];
EOT;
	}

	protected function render_config_constructor($synthesized)
	{
		$lines = array();

		ksort($synthesized);

		foreach ($synthesized as $name => $constructor)
		{
			list($callback, $from) = explode('#', $constructor) + [ 1 => null ];

			$lines[] = "'$name' => [ '$callback'" . ($from ? ", '$from'" : '') . " ]";
		}

		return implode(",\n\t\t", $lines);
	}

	public function write()
	{
		file_put_contents($this->pathname, $this->render());
	}
}